#1 创建版本库
小结
现在总结一下今天学的两点内容：
初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
	1.使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	2.使用命令git commit -m <message>，完成。
	
#2 时光穿梭机
小结
要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

#3 版本回退
小结
现在总结一下：
1.HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
2.穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
3.要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

#4 工作区和暂存区
git diff 比较的是工作区文件与暂存区文件的区别（上次git add 的内容）。
git diff --cached 比较的是暂存区的文件与仓库分支里（上次git commit 后的内容）的区别。
git diff HEAD -- 命令可以查看工作区和版本库里面最新版本的区别。（本地的文件是+，即工作区的文件，
需要对比的文件是-，即版本库的文件）
小结
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区。
还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

#5 管理修改
Git跟踪并管理的是修改，而非文件。
我测试了cat <file name>命令，其功能是显示在工作区、暂存区和分支里同名文档的最新修改版本的内容。
小结
现在，你又理解了Git是如何跟踪修改的，每次修改，如果不用git add到暂存区，那就不会加入到commit中。























