一 创建版本库
#1 创建版本库
小结
现在总结一下今天学的两点内容：
初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
	1.使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	2.使用命令git commit -m <message>，完成。
二 	时光穿梭机
#1 时光穿梭机
小结
要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

#2 版本回退
小结
现在总结一下：
1.HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
2.穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
3.要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

#3 工作区和暂存区
git diff 比较的是工作区文件与暂存区文件的区别（上次git add 的内容）。
git diff --cached 比较的是暂存区的文件与仓库分支里（上次git commit 后的内容）的区别。
git diff HEAD -- 命令可以查看工作区和版本库里面最新版本的区别。（本地的文件是+，即工作区的文件，
需要对比的文件是-，即版本库的文件）
小结
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区。
还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

#4 管理修改
Git跟踪并管理的是修改，而非文件。
我测试了cat <file name>命令，其功能是显示在工作区、暂存区和分支里同名文档的最新修改版本的内容。
小结
现在，你又理解了Git是如何跟踪修改的，每次修改，如果不用git add到暂存区，那就不会加入到commit中。

#5 撤销修改
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
1.readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
2.readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
小结
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，
参考版本回退一节，不过前提是没有推送到远程库。

#6删除文件
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
小结
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，
你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

三 远程仓库
创建SSH Key
$ ssh-keygen -t rsa -C "youremail@example.com"

#1 添加远程库
git remote add origin https://github.com/luckboyss/awesome-python3-webapp.git
git remote add origin git@github.com:luckboyss/awesome-python3-webapp.git
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
小结
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

#2 从远程克隆库
$ git clone git@github.com:luckboyss/awesome-python3-webapp.git
小结
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
https SSH协议切换：将.git/config文件中url = http://xxx.com/Name/project.git改为
url = git@xxx.com/Name/project.git即可。

四 分支管理
Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！
无论你的版本库是1个文件还是1万个文件。

#1 创建与合并分支
创建分支'dev':$git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev （切换到分支dev）
用git branch命令查看当前分支：$ git branch
git branch命令会列出所有分支，当前分支前面会标一个*号。
git merge命令用于合并指定分支到当前分支：$ git merge dev
删除dev分支：$ git branch -d dev
小结
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

#2 解决冲突
小结
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提。
用git log --graph命令可以看到分支合并图。（ git log --graph --pretty=oneline --abbrev-commit）

#3 分支管理策略
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
$ git merge --no-ff -m "merge with no-ff" dev
小结
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
而fast forward合并就看不出来曾经做过合并。

#4 Bug分支
储藏工作现场：gitstash
查看临时存储的工作区：git stash list
恢复工作现场：
1.用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
2.用git stash pop，恢复的同时把stash内容也删了：
你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
$ git stash apply stash@{0}
试验发现：
1.创建分支dev，修改readme.txt，切换到master，可以看到该文件。
2.在dev，加到暂存区，切换到master，可以看到。
3.在dev，将文件释放到工作区，stash，切换到master，没有看到。
4.切换到dev，把stash pop，文件回到工作区。
5.在dev，将文件加到暂存区，stash，切换到master，没有看到。
6.切换到dev，把stash pop，文件回到工作区。
7.在dev，修改文件test.txt,并且加到暂存区，此时，readme.txt还在   工作区，切换到master,可以看到这两个文件，状态和在dev一致，切   换回dev，stash，然后pop，两个文件都出现在工作区。

结论：1.工作区和暂存区是共用的，在各个分支里都可以看到没被stash的文件。
      2.在工作区和暂存区的文件都可以stash，pop之后都会出现在工作区。
小结
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

#5 feature分支
小结
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

#6 多人协作
要查看远程库的信息，用git remote：$ git remote
用git remote -v显示更详细的信息：$ git remote -v
推送时指定本地分支，Git就会把该分支推送到远程库对应的远程分支上：$ git push origin master
如果要推送其他分支，比如dev，就改成：$ git push origin dev

因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream-to=origin/<branch-name> <branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，
本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream-to=origin/<branch-name> <branch-name>；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

#7 Rebase
小结
rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

五 标签管理

#1 创建标签
小结
命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
命令git tag可以查看所有标签，用git show <tagname>查看标签信息。

#2 操作标签
小结
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

六 使用Github
小结
在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。

七 自定义Git
让Git显示颜色，会让命令输出看起来更醒目：
$ git config --global color.ui true

#1 忽略特殊文件
如果你确实想添加该文件，可以用-f强制添加到Git：$ git add -f App.class
或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
$ git check-ignore -v App.class
小结
忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！

#2 配置别名
我们只需要敲一行命令，告诉Git，以后st就表示status：$ git config --global alias.st status
命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区。
配置一个unstage别名：$ git config --global alias.unstage 'reset HEAD'
配置一个git last，让其显示最后一次提交信息：$ git config --global alias.last 'log -1'
甚至还有人丧心病狂地把lg配置成了：git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
每个仓库的Git配置文件都放在.git/config文件中：$ cat .git/config 
当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：$ cat .gitconfig
小结
给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。

#3 搭建Git服务器
小结
搭建Git服务器非常简单，通常10分钟即可完成；
要方便管理公钥，用Gitosis；
要像SVN那样变态地控制权限，用Gitolite。

###期末总结###
Git虽然极其强大，命令繁多，但常用的就那么十来个，掌握好这十几个常用命令，你已经可以得心应手地使用Git了。


















