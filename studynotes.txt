一 创建版本库
#1 创建版本库
小结
现在总结一下今天学的两点内容：
初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
	1.使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	2.使用命令git commit -m <message>，完成。
二 	时光穿梭机
#1 时光穿梭机
小结
要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

#2 版本回退
小结
现在总结一下：
1.HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
2.穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
3.要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

#3 工作区和暂存区
git diff 比较的是工作区文件与暂存区文件的区别（上次git add 的内容）。
git diff --cached 比较的是暂存区的文件与仓库分支里（上次git commit 后的内容）的区别。
git diff HEAD -- 命令可以查看工作区和版本库里面最新版本的区别。（本地的文件是+，即工作区的文件，
需要对比的文件是-，即版本库的文件）
小结
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区。
还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

#4 管理修改
Git跟踪并管理的是修改，而非文件。
我测试了cat <file name>命令，其功能是显示在工作区、暂存区和分支里同名文档的最新修改版本的内容。
小结
现在，你又理解了Git是如何跟踪修改的，每次修改，如果不用git add到暂存区，那就不会加入到commit中。

#5 撤销修改
命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
1.readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
2.readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
小结
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，
参考版本回退一节，不过前提是没有推送到远程库。

#6删除文件
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
小结
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，
你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

三 远程仓库
创建SSH Key
$ ssh-keygen -t rsa -C "youremail@example.com"

#1 添加远程库
git remote add origin https://github.com/luckboyss/awesome-python3-webapp.git
git remote add origin git@github.com:luckboyss/awesome-python3-webapp.git
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
小结
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

#2 从远程克隆库
$ git clone git@github.com:luckboyss/awesome-python3-webapp.git
小结
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。





















































